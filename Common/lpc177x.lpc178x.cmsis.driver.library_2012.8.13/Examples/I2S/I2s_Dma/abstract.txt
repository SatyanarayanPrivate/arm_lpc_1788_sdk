 /***********************************************************************
* $Id$		abstract.txt		2011-06-02		
* @file		I2S\I2s_Dma\abstract.txt 
* @brief	Description of the I2S DMA example.
* @version	1.0
* @date		02. June. 2011
* @author	NXP MCU SW Application Team
* 
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/
  
@Example description:
	Purpose:
		This example describes how to use I2S in DMA mode
	Process:
		I2S setup:
			- wordwidth: 16 bits
			- stereo mode
			- master mode for TX and slave mode for RX
			- ws_haftword = 31
			- frequency = 44.1Khz (maximum is 96kHz)
		GPDMA channel 0 and 1 are configured in this example.
		DMA channel 0 used to transfer data from interal RAM source to I2S peripheral
		DMA channel 1 used to transfer data from I2S peripheral to internal RAM destination.
		Transfer size = 0x0a bytes
		rx_depth_dma = 8
		tx_depth_dma = 1
		So, when recieve FIFO level = 8, it triggers a receive DMA request save data from I2S to 
		destination memory.
		And when transmit FIFO level = 1, it triggers a transmit DMA request to send data from source
		memory to I2S. 
		After transmittion finised, "Buffer_Verify(void)" function will be called to compare data from 
		source and destination. If not similar, it will return FALSE.
		Open serial terminal to observe I2S transfer process.
		
		Pls note that because I2S is the protocol for audio data transfer, so sometime it has dummy data
		while FIFO transmit is empty. These data are not importance and they can be ignored when verify. 

@Directory contents:
	\Keil:	includes RVMDK (Keil)project and configuration files
	\EWARM: includes EWARM (IAR) project and configuration files
	 
	I2s_Dma.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested on:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP22: OFF
				- JP23: OFF
				- JP24: OFF
				- JP25: OFF
				- JP26: OFF
				- JP27: OFF
				(Note: These jumpers are near the speaker)
				Remain jumpers: Default
			2. LPC1788 IAR Start Kit Rev.B
				- 3.3VA_E	:ON
				- VREG		:ON
				- IO_E		:ON
				- PWR_SEL	:depends on power source selection
		(Choose correct working board by setting "_CURR_USING_BRD" marco in .\BoardSupport\bsp.h file)
			
		I2S connection: I2S-RX connects to I2S-TX as following:		
				P0.4-I2SRX_CLK connects to P0.7-I2STX_CLK
				P0.5-I2SRX_WS  connects to P0.8-I2STX_WS
				P0.6-I2SRX_SDA connects to P0.9-I2STX_SDA				

			Pin-map
								OEM board			IAR board					
				I2SRX_CLK		J5.15				EXT-4				
				I2SRX_WS		J5.16				EXT-5
				I2SRX_SDA		J3.18				EXT-6
				
				I2STX_CLK		J5.17			  	EXT-7
				I2STX_WS		J3.19			  	EXT-8
				I2STX_SDA		J5.18			  	EXT-9
				
	Serial display configuration: (e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- UART0: USB serial port
					+ All jumpers: Default
				- UART1: 
					+ P0.15 (@ J5.19) - JP12.2
					+ P0.16 (@ J3.24) - JP13.2
				- UART2:
					+ JP6: 	1-2: OFF
							3-4: OFF
							5-6: ON
					+ JP12: 1-2
					+ JP13: 1-2
					+ Other jumpers: Default
				- UART3:
					+ P0.2 (@J5.13) - JP12.2
					+ P0.3 (@J5.14) - JP13.2
				- UART4:
					+ P0.22 (@J3.25) - JP12.2
					+ P2.9  (@J3.15) - JP13.2
	    	2. LPC1788 IAR Start Kit Rev.B
				- UART0: 
					All jumpers: optional
			Note: Pls sure that "USED_UART_DEBUG_PORT" macro in debug_frmwrk.h is set correctly
			
			Setting:
				+ 115200bps 
				+ 8 data bit 
				+ No parity 
				+ 1 stop bit 
				+ No flow control 
	
	Running mode:
		This example can run on RAM/ROM mode.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
			to be connected:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP20: 1-2: ON
						3-4: ON
			(Using UART0 on USB serial port
			Sure that you choose correct COM port number - Pls reference at:
			"Device Manager" -> "Ports(COM & LPT)" -> "USB Serial Port (COMx)")
		    
		    2. LPC1788 IAR Start Kit Rev.B
				- RST_E: ON
				- ISP_E: ON
	
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on ROM mode)
		- Step 3: Connect UART0\1\2 on this board to COM port on your computer
		- Step 4: Configure hardware and serial display as above instruction 
		- Step 5: Run example, observe data on serial display 
					+ Press '1' to initialize buffer
					+ Press '2' to initialize DMA
					+ Press '3' to start I2S operation
