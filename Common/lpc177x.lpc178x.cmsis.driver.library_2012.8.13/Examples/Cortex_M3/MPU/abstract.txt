/**********************************************************************
* $Id$		abstract.txt 			
*//**
* @file		abstract.txt 
* @brief	Example description file
* @version	1.0
* @date		
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/
  
@Example description:
	Purpose:
		This example describes how to use MPU to protect memory region.
	Process:
		Use MPU to set up 6 memory regions as follows:
		  Region 0 - Privileged code: 0x00000000 - 0x0007FFFF(512kB)
		  Region 1 - Privileged data: 0x10000000 - 0x1000FFFF(64kB)
		  Region 2 - APB Peripheral:  0x40000000 - 0x400FFFFF(1MB)
		  Region 3 - AHB peripheral:  0x20080000 - 0x200BFFFF(256KB)
		  Region 4 - System control:  0xE0000000 - 0xE00FFFFF(1MB)
		  Region 5 - On-chip SRAM:    0x20000000 - 0x20007FFF(32kB)
		  Except region 5 can not access, remain regions can access normally.
		After setup:
		- First, we try to access memory at address: 0x10000000 -> it will allow to access
		- Last, we try to access memory at address: 0x20000000 -> it will not allow to access
		At the time we access to memory that disallow, Memory Management Handler will be invoked
		and we blink LED P1.28 to announce.
					
@Directory contents:
	\EWARM: includes EWARM (IAR) project and configuration files
	\Keil:	includes RVMDK (Keil)project and configuration files 
	
	lpc177x_8x_libcfg.h: Library configuration file - include needed driver library for this example 
	makefile: Example's makefile (to build with GNU toolchain)
	mpu_test.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested on:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
			2. LPC1788 IAR Start Kit Rev.B
				- 3.3VA_E	:ON
				- VREG		:ON
				- IO_E		:ON
				- PWR_SEL	:depends on power source selection
		(Choose correct working board by setting "_CURR_USING_BRD" marco in .\BoardSupport\bsp.h file)
						
		UART configuration:
		1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- UART0: USB serial port
					+ All jumpers: Default
				- UART1: 
					+ P0.15 (@ J5.19) - JP12.2
					+ P0.16 (@ J3.24) - JP13.2
				- UART2:
					+ JP6: 	1-2: OFF
						3-4: OFF
						5-6: ON
					+ JP12: 1-2
					+ JP13: 1-2
					+ Other jumpers: Default
				- UART3:
					+ P0.2 (@J5.13) - JP12.2
					+ P0.3 (@J5.14) - JP13.2
				- UART4:
					+ P0.22 (@J3.25) - JP12.2
					+ P2.9 (@J3.15) - JP13.2
	    	2. LPC1788 IAR Start Kit Rev.B
				- UART0: 
					All jumpers: optional
			
			Setting:
				+ 115200bps 
				+ 8 data bit 
				+ No parity 
				+ 1 stop bit 
				+ No flow control 
	
	Running mode:
		This example can run on RAM/ROM mode.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
			to be connected:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP20: 1-2: ON
						3-4: ON
			(Using UART0 on USB serial port
			Sure that you choose correct COM port number - Pls reference at:
			"Device Manager" -> "Ports(COM & LPT)" -> "USB Serial Port (COMx)")
		    
		    2. LPC1788 IAR Start Kit Rev.B
				- RST_E: ON
				- ISP_E: ON
	
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on ROM mode)
		- Step 3: Connect UART0 on this board to COM port on your computer
		- Step 4: Configure hardware and serial display as above instruction 
		- Step 5: Run example
			- Press '1' to access memory in region 1
			- Press '2' to access memory in region 6
			See LED P1.28 blink
			
		