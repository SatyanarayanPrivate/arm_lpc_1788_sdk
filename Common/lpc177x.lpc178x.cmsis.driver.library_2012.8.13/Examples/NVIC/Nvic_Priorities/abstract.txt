/***********************************************************************
* $Id$		abstract.txt		2011-06-02		
* @file		NVIC\Nvic_Priorities\abstract.txt 
* @brief	Description of the NVIC Priority example.
* @version	1.0
* @date		02. June. 2011
* @author	NXP MCU SW Application Team
* 
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/ 
  
@Example description:
	Purpose:
		This example describes how to configure NVIC priority grouping for testing 
		tail-chaining/Late-arriving interrupt mode.
	Process:
		This example uses 2 external interrupt 0 and 3 as IRQ channels.
		Setting "INT_MODE" macro to chose interrupt mode test.
			- INT_MODE = 0: Tail-chainning interrupt testing
			EINT0 interrupt is assigned group-priority = 0, sub-priority = 2
			ADC interrupt is assigned group-priority = 0, sub-priority = 1
			Two IRQ channels has same group.So, new ISR can not pre-empt previous interrupt 
			when it's executing even if new ISR has higher priority than curren ISR
			
			- INT_MODE = 1: Late-arriving interrupt testing.
			EINT0 interrupt is assigned group-priority = 0, sub-priority = 0
			ADC interrupt is assigned group-priority = 1, sub-priority = 0
			EINT0 interrupt has higher group-priority than ADC interrupt, so EINT0 interrupt can 
			pre-empt ADC interrupt when it's executing
		
		In this example, EINT0 interrupt occurs when pressing button INT0. 
		EINT0 interrupt interrupt will blink LED1 10 (LED USB OTG) times.
		
		ADC interrupt occurs periodly to take the ADC samples from the ADC potentiometer
		ADC interrupt will blink LED2 (LED USB Host) 10 times
			
					
@Directory contents:
	\Keil:	includes RVMDK (Keil)project and configuration files
	\EWARM: includes EWARM (IAR) project and configuration files
	 
	Nvic_Priorities.c: Main program

@How to run:
	Hardware configuration:
		This example was tested on:
				1. LPC1788 OEM Board rev A and OEM Base Board rev A
					Press SW6 Push Button to generate EXT0 interrupt for testing
					- LED1: connect to P1.18
					- LED2: connect to P0.13
				2. LPC1788 IAR Start Kit Rev.B
					- 3.3VA_E	:ON
					- VREG		:ON
					- IO_E		:ON
					- PWR_SEL	:depends on power source selection
					
					- LED1: connect to P1.13
					- LED2: connect to P1.18
					To generate EXT0 interrupt, it should use a wire to pull P2.10 at ISP_E 
					jumper (at side that linked directly to R10 resistor) to GND
			(Choose correct working board by setting "_CURR_USING_BRD" marco in .\BoardSupport\bsp.h file)	
			
	Serial display configuration: (e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- UART0: USB serial port
					+ All jumpers: Default
				- UART1: 
					+ P0.15 (@ J5.19) - JP12.2
					+ P0.16 (@ J3.24) - JP13.2
				- UART2:
					+ JP6: 	1-2: OFF
							3-4: OFF
							5-6: ON
					+ JP12: 1-2
					+ JP13: 1-2
					+ Other jumpers: Default
				- UART3:
					+ P0.2 (@J5.13) - JP12.2
					+ P0.3 (@J5.14) - JP13.2
				- UART4:
					+ P0.22 (@J3.25) - JP12.2
					+ P2.9  (@J3.15) - JP13.2
	    	2. LPC1788 IAR Start Kit Rev.B
				- UART0: 
					All jumpers: optional
			Note: Pls sure that "USED_UART_DEBUG_PORT" macro in debug_frmwrk.h is set correctly
			
			Setting:
				+ 115200bps 
				+ 8 data bit 
				+ No parity 
				+ 1 stop bit 
				+ No flow control 		
				
	
	Running mode:
		This example can run on RAM/ROM mode.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
			to be connected:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP20: 1-2: ON
						3-4: ON
			(Using UART0 on USB serial port
			Sure that you choose correct COM port number - Pls reference at:
			"Device Manager" -> "Ports(COM & LPT)" -> "USB Serial Port (COMx)")
		    
		    2. LPC1788 IAR Start Kit Rev.B
				- RST_E: ON
				- ISP_E: ON
	
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on ROM mode)
		- Step 3: Configure hardward as above instruction
		- Step 4: Run example
				+ At the beginning, the ADC interrupt will normally happen and blink LED2 in 10 times
				per an interrupt ocurrence. 
				+ If EXT0 interrupt is occurred (by hitting INT0 button), LED1 will blink 10 times 
				
			- Test tail-chaining interrupt mode:
				When LED2 is blinking (under the effect of ADC interrupt), if pressing INT0 to generate
				the INTO will be generating to blink the LED1 10 times right after an ADC interrupt 
				is finished 
				
			- Test late-arriving interrupt mode:
				When LED2 is blinking (under the effect of ADC interrupt), if pressing INT0 to generate
				the INTO will be generating to blink the LED1 10 times immediately without caring 
				about the completion of the ADC interrupt. In this case, the INT0 interrupt does pre-empt
				the ADC interrupt
				After this INT0 is completed, the ADC interrupt will re-start to blink the LED2 
				continuously because its interrupt occurence.

@Note: LED P1.18 is LED USB OTG
	   LED P0.13 is LED USB Host					
