 /***********************************************************************
* $Id$		abstract.txt		2011-06-02		
* @file		WDT\Wdt_Reset\abstract.txt
* @brief	Description of the WDT Reset example.
* @date		02. June. 2011
* @author	NXP MCU SW Application Team
* 
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/
  
@Example description:
	Purpose:
		This example describes how to use WDT to generate a reset event after a specific time.
	Process:
		WDT setting:
			- generate reset chip when WDT times out.
			- time-out = 5s
			- clock source: IRC (Internal RC oscillator)
			
		After start, WDT counter decrease until underflow (5s) to generate a chip reset.
		
		If between 5s, RESET button is pressed, chip force an external reset.
		
		If not, WDT will reset chip after 5s automatically.
		
		After reset, the program will determine what cause of last reset time (external 
		reset or WDT Timeout reset)
		
@Directory contents:
	\EWARM: includes EWARM (IAR) project and configuration files
	\Keil:	includes RVMDK (Keil)project and configuration files 
	 
	Wdt_Reset.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested on:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
			2. LPC1788 IAR Start Kit Rev.B
				- 3.3VA_E	:ON
				- VREG		:ON
				- IO_E		:ON
				- PWR_SEL	:depends on power source selection
		(Choose correct working board by setting "_CURR_USING_BRD" marco in .\BoardSupport\bsp.h file)
				
		Serial display configuration: (e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- UART0: USB serial port
					+ All jumpers: Default
				- UART1: 
					+ P0.15 (@ J5.19) - JP12.2
					+ P0.16 (@ J3.24) - JP13.2
				- UART2:
					+ JP6: 	1-2: OFF
							3-4: OFF
							5-6: ON
					+ JP12: 1-2
					+ JP13: 1-2
					+ Other jumpers: Default
				- UART3:
					+ P0.2 (@J5.13) - JP12.2
					+ P0.3 (@J5.14) - JP13.2
				- UART4:
					+ P0.22 (@J3.25) - JP12.2
					+ P2.9  (@J3.15) - JP13.2
	    	2. LPC1788 IAR Start Kit Rev.B
				- UART0: 
					All jumpers: optional
			Note: Pls sure that "USED_UART_DEBUG_PORT" macro in debug_frmwrk.h is set correctly
			
			Setting:
				+ 115200bps 
				+ 8 data bit 
				+ No parity 
				+ 1 stop bit 
				+ No flow control  
	
	Running mode:
		RAM mode:   This example can be run on RAM mode with debugger. But after its reset, the code
					will retrieve back from FLASH. It's unable to continue running the current image

		ROM(FLASH)mode: This example can be run on ROM mode with debugger or standalone after burning. 
					All files in each example must be built to .hex file. This file will be burned into 
					ROM(Flash) memory through an external tool (i.e: Flash Magic...) befor running.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
			to be connected:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP20: 1-2: ON
						3-4: ON
			(Using UART0 on USB serial port
			Sure that you choose correct COM port number - Pls reference at:
			"Device Manager" -> "Ports(COM & LPT)" -> "USB Serial Port (COMx)")
		    
		    2. LPC1788 IAR Start Kit Rev.B
				- RST_E: ON
				- ISP_E: ON
	
	Step to run:
		- Step 1: Choose correct working board by uncomment correct defined board in main file
		- Step 2: Build example.
		- Step 3: Burn hex file into board (if run on ROM mode)
		- Step 4: Connect UART on this board to COM port on your computer
		- Step 5: Configure hardware and serial display as above instruction 
		- Step 6: Run example and observe data on serial display
		